"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 5.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import platform
from pathlib import Path
from datetime import timedelta
from dotenv import load_dotenv
from django.utils import timezone

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('ENCRYPTION_KEY')
ADMIN_SECRET_32_KEY = os.getenv('ADMIN_SECRET_32_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', True)

ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '192.168.1.102',
    'ngrok-free.app',
    '78.46.229.209'
]

CSRF_TRUSTED_ORIGINS = [
    'http://192.168.1.102:8000',
    'http://78.46.229.209:7013',
    "https://*.ngrok-free.app",
    "http://localhost:5500"
]

# For Nginx Proxy Manager
USE_X_FORWARDED_HOST = True
USE_X_FORWARDED_PORT = True
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',
    
    # My apps
    "core",
    "accounts",
    
    # Third Party Packages
    "django_htmx",
    'django_cleanup.apps.CleanupConfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    
    # Thirdparty
    "django_htmx.middleware.HtmxMiddleware",
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            BASE_DIR / 'templates'
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


AUTH_USER_MODEL = 'accounts.User'
# LOGIN_REDIRECT_URL = '/accounts/login'
# LOGIN_URL  = '/accounts/login'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'test': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.environ.get('PG_NAME'),       
        'USER': os.environ.get('PG_USER'),
        'PASSWORD': os.environ.get('PG_PASSWORD'),
        'HOST': os.environ.get('PG_HOST'),
        'PORT': os.environ.get('PG_PORT'),
    }
}


# Logging Settings
LOG_DIR = BASE_DIR / "logs"
if not LOG_DIR.exists():
    LOG_DIR.mkdir(parents=True, exist_ok=True)

# Determine the appropriate log handler based on platform
if platform.system() == 'Windows':
    # Use WatchedFileHandler on Windows to avoid file locking issues during rotation
    FILE_HANDLER_CLASS = 'logging.handlers.WatchedFileHandler'
    # WatchedFileHandler doesn't support these parameters
    FILE_HANDLER_PARAMS = {}
else:
    # Use RotatingFileHandler on other platforms
    FILE_HANDLER_CLASS = 'logging.handlers.RotatingFileHandler'
    # Parameters for RotatingFileHandler
    FILE_HANDLER_PARAMS = {
        "backupCount": 10,
        "maxBytes": 10*1024*1024  # 10MB
    }

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "[{asctime}] [{levelname}] [{module}] {name} {message}",
            "style": "{",
        },
        "simple": {
            "format": "[{asctime}] [{levelname}] {name}: {message}",
            "style": "{",
        },
    },
    "handlers": {
        "file": {
            "level": "WARNING",
            "class": FILE_HANDLER_CLASS,
            "filename": LOG_DIR / "django.log",  # Put logs in a dedicated directory
            "formatter": "verbose",
            **FILE_HANDLER_PARAMS,
        },
        "console": {
            "level": "DEBUG",
            "class": "logging.StreamHandler",
            "formatter": "simple",
        },
        "error_file": {  # Separate handler for errors
            "level": "ERROR",
            "class": FILE_HANDLER_CLASS,
            "filename": LOG_DIR / "error.log",
            "formatter": "verbose",
            **FILE_HANDLER_PARAMS,
        },
        'all_logs_file': {
            "level": "DEBUG",
            "class": FILE_HANDLER_CLASS,
            "filename": LOG_DIR / "all.log",
            "formatter": "verbose",
            **FILE_HANDLER_PARAMS,
        }
    },
    "loggers": {
        "django": {  # Django framework logging
            "handlers": ["console", "file", "error_file", "all_logs_file"],
            "level": "ERROR",
            "propagate": True,
        },
        "django.request": {  # Request logging
            "handlers": ["console", "error_file", "all_logs_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "django.server": {  # Added server logger
            "handlers": ["console", "error_file", "all_logs_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "django.security": {  # Security logging
            "handlers": ["error_file", "all_logs_file"],
            "level": "DEBUG",
            "propagate": False,
        },
        "task_scheduler": {
            "handlers": ["console", "file", "error_file", "all_logs_file"],
            "level": "INFO",
            "propagate": False,
        }
    },
    'root': {
        'handlers': ['console', 'all_logs_file', 'file', 'error_file'],
        'level': 'DEBUG',
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Africa/Nairobi'

DEFAULT_PHONE_COUNTRY = "254"

USE_I18N = True

USE_TZ = False


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static"
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Task Scheduler Configuration
TASK_SCHEDULER = {
    # Worker pool configuration
    'MAX_WORKERS': 20,                 # Maximum number of concurrent tasks to run
    
    # Scheduler timing configuration
    'POLL_INTERVAL': 1,                # Seconds between scheduler cycles to check for due tasks
    'STARTUP_DELAY': 1,                # Seconds to delay scheduler startup after server initialization
    
    # Task retry configuration
    'DEFAULT_MAX_RETRIES': 3,          # Default number of retries for failed tasks
    'DEFAULT_RETRY_DELAY': 60,         # Default delay in seconds before retrying a failed task
    
    # Task retention configuration
    'RETAIN_COMPLETED_TASKS': timedelta(days=7).total_seconds(),   # How long to keep completed tasks (in seconds)
    'RETAIN_FAILED_TASKS': timedelta(days=120).total_seconds(),     # How long to keep failed tasks (in seconds)
    
    # Task batch processing
    'MAX_TASKS_PER_BATCH': 50,         # Maximum number of tasks to process in a single scheduler cycle
    
    # Logging and monitoring
    'LOG_LEVEL': 'INFO',               # Logging level for the task scheduler
    'DETAILED_ERRORS': True,           # Whether to include full tracebacks in error logs
    
    # Feature flags
    'DISABLED': False,                 # Set to True to disable the scheduler entirely
    'CLEANUP_ENABLED': False,           # Set to False to disable automatic task cleanup
    'AUTO_START': True,                # Whether to start the scheduler automatically with Django
}
